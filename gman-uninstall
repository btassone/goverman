#!/bin/bash

# gman-uninstall - Universal uninstaller for gman (goverman)
# This script removes gman with options for keeping Go versions
#
# Usage:
#   gman-uninstall [options]
#
# Options:
#   --remove-all          Remove all gman-installed Go versions (default if no option specified)
#   --keep-default        Keep only the default Go version, remove others
#   --keep-all           Keep all Go versions, only remove gman itself
#   -h, --help           Show this help message

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Variables
GMAN_BIN="/usr/local/bin/gman"
MAN_FILE="/usr/local/share/man/man1/gman.1"
GOBIN="${GOBIN:-${GOPATH:-$HOME/go}/bin}"
SDK_DIR="$HOME/sdk"

# Track what we remove
REMOVED_ITEMS=()

# Options
REMOVAL_MODE=""  # Will be set to: remove-all, keep-default, or keep-all

# Functions
print_error() {
    echo -e "${RED}Error: $1${NC}" >&2
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_info() {
    echo -e "${BLUE}→ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}Warning: $1${NC}"
}

# Show help message
show_help() {
    echo "gman-uninstall - Universal uninstaller for gman (goverman)"
    echo ""
    echo "Usage: gman-uninstall [options]"
    echo ""
    echo "Options:"
    echo "  --remove-all      Remove all gman-installed Go versions (default)"
    echo "  --keep-default    Keep only the default Go version, remove others"
    echo "  --keep-all        Keep all Go versions, only remove gman itself"
    echo "  -h, --help        Show this help message"
    echo ""
    echo "If no option is specified, the script will ask what you want to do."
    exit 0
}

# Check if running with appropriate permissions
check_permissions() {
    local needs_sudo=false
    
    # Check if we need sudo for system files
    if [[ -f "$GMAN_BIN" && ! -w "$(dirname "$GMAN_BIN")" ]]; then
        needs_sudo=true
    fi
    if [[ -f "$MAN_FILE" && ! -w "$(dirname "$MAN_FILE")" ]]; then
        needs_sudo=true
    fi
    
    if [[ "$needs_sudo" == "true" ]]; then
        if command -v sudo >/dev/null 2>&1; then
            SUDO="sudo"
            print_info "Uninstallation requires sudo privileges for system files"
        else
            print_error "Cannot write to system directories and sudo is not available"
            print_info "Please run this script as root or install sudo"
            exit 1
        fi
    else
        SUDO=""
    fi
}

# Remove gman binary and companion scripts
remove_gman_binary() {
    if [[ -f "$GMAN_BIN" ]]; then
        print_info "Removing gman binary..."
        $SUDO rm -f "$GMAN_BIN"
        REMOVED_ITEMS+=("gman binary from $GMAN_BIN")
        print_success "Removed gman binary"
    else
        print_info "gman binary not found at $GMAN_BIN"
    fi
    
    # Remove companion scripts
    local gman_dir=$(dirname "$GMAN_BIN")
    local companion_scripts=("gman-update" "gman-uninstall")
    
    for script in "${companion_scripts[@]}"; do
        local script_path="$gman_dir/$script"
        if [[ -f "$script_path" ]]; then
            print_info "Removing $script..."
            $SUDO rm -f "$script_path"
            REMOVED_ITEMS+=("$script from $script_path")
            print_success "Removed $script"
        fi
    done
}

# Remove man page
remove_man_page() {
    if [[ -f "$MAN_FILE" ]]; then
        print_info "Removing man page..."
        $SUDO rm -f "$MAN_FILE"
        REMOVED_ITEMS+=("man page from $MAN_FILE")
        print_success "Removed man page"
        
        # Update man database if available
        if command -v mandb >/dev/null 2>&1; then
            $SUDO mandb >/dev/null 2>&1 || true
        fi
    else
        print_info "Man page not found at $MAN_FILE"
    fi
}

# Find all gman-installed Go versions
find_go_versions() {
    local versions=()
    
    # Check in GOBIN
    if [[ -d "$GOBIN" ]]; then
        for file in "$GOBIN"/go[0-9]*; do
            if [[ -x "$file" ]]; then
                versions+=("$file")
            fi
        done
    fi
    
    echo "${versions[@]}"
}

# Find the default Go version
find_default_go() {
    if [[ -L "$GOBIN/go" ]]; then
        # It's a symlink - get the target
        local target=$(readlink "$GOBIN/go" 2>/dev/null || true)
        if [[ -n "$target" ]]; then
            # Handle both absolute and relative symlinks
            if [[ "$target" = /* ]]; then
                echo "$target"
            else
                # Relative symlink
                echo "$GOBIN/$target"
            fi
        fi
    fi
}

# Handle Go version removal based on mode
handle_go_versions() {
    local mode="$1"
    
    if [[ "$mode" == "keep-all" ]]; then
        print_info "Keeping all Go versions (as requested)"
        return
    fi
    
    print_info "Looking for gman-installed Go versions..."
    
    local versions=($(find_go_versions))
    local default_go=$(find_default_go)
    
    if [[ ${#versions[@]} -eq 0 ]]; then
        print_info "No gman-installed Go versions found"
        return
    fi
    
    # Build list of versions to remove
    local versions_to_remove=()
    local versions_to_keep=()
    
    if [[ "$mode" == "keep-default" && -n "$default_go" ]]; then
        # Keep only the default
        for version in "${versions[@]}"; do
            # Normalize paths for comparison
            local normalized_version=$(readlink -f "$version" 2>/dev/null || echo "$version")
            local normalized_default=$(readlink -f "$default_go" 2>/dev/null || echo "$default_go")
            
            if [[ "$normalized_version" == "$normalized_default" ]]; then
                versions_to_keep+=("$version")
            else
                versions_to_remove+=("$version")
            fi
        done
    else
        # Remove all (either mode is remove-all or no default found for keep-default)
        versions_to_remove=("${versions[@]}")
    fi
    
    # Show what will happen
    if [[ ${#versions_to_keep[@]} -gt 0 ]]; then
        print_info "Will keep ${#versions_to_keep[@]} Go version(s):"
        for version in "${versions_to_keep[@]}"; do
            echo "  ✓ $version"
        done
    fi
    
    if [[ ${#versions_to_remove[@]} -eq 0 ]]; then
        print_info "No Go versions to remove"
        return
    fi
    
    print_warning "Will remove ${#versions_to_remove[@]} Go version(s):"
    for version in "${versions_to_remove[@]}"; do
        echo "  ✗ $version"
    done
    
    # Ask for confirmation if not in CI
    if [[ "${CI:-false}" != "true" ]]; then
        echo
        read -p "Continue with removal? (y/N) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Skipping Go version removal"
            return
        fi
    fi
    
    # Remove versions
    for version in "${versions_to_remove[@]}"; do
        rm -f "$version"
        REMOVED_ITEMS+=("Go binary: $version")
    done
    
    # Always remove default symlink when removing any versions
    if [[ -L "$GOBIN/go" ]]; then
        rm -f "$GOBIN/go"
        REMOVED_ITEMS+=("Default Go symlink")
    fi
    
    # Handle SDK directories
    if [[ -d "$SDK_DIR" ]]; then
        local sdks_to_remove=()
        
        # Find SDKs to remove based on removed versions
        for version in "${versions_to_remove[@]}"; do
            local version_name=$(basename "$version")
            if [[ -d "$SDK_DIR/$version_name" ]]; then
                sdks_to_remove+=("$SDK_DIR/$version_name")
            fi
        done
        
        if [[ ${#sdks_to_remove[@]} -gt 0 ]]; then
            print_info "Removing ${#sdks_to_remove[@]} SDK director(ies)..."
            for sdk in "${sdks_to_remove[@]}"; do
                rm -rf "$sdk"
                REMOVED_ITEMS+=("SDK directory: $sdk")
            done
        fi
    fi
    
    if [[ ${#versions_to_remove[@]} -gt 0 ]]; then
        print_success "Removed selected Go versions"
    fi
}

# Remove PATH entries from shell profiles
remove_path_entries() {
    print_info "Removing PATH entries from shell profiles..."
    
    local profiles=(
        "$HOME/.bashrc"
        "$HOME/.bash_profile"
        "$HOME/.zshrc"
        "$HOME/.config/fish/config.fish"
    )
    
    for profile in "${profiles[@]}"; do
        if [[ -f "$profile" ]]; then
            # Create backup
            cp "$profile" "$profile.goverman-backup"
            
            # Remove goverman PATH entries
            if [[ "$profile" == *"fish"* ]]; then
                # Fish shell uses different syntax
                sed -i.tmp '/# goverman PATH/,/fish_add_path.*go\/bin/d' "$profile"
            else
                # Bash/Zsh
                sed -i.tmp '/# goverman PATH/,/export PATH.*go\/bin/d' "$profile"
            fi
            
            # Check if anything was removed
            if ! cmp -s "$profile" "$profile.goverman-backup"; then
                REMOVED_ITEMS+=("PATH entry from $profile")
                print_success "Removed PATH entry from $(basename "$profile")"
                rm -f "$profile.tmp"
            else
                rm -f "$profile.tmp" "$profile.goverman-backup"
            fi
        fi
    done
}

# Clean up empty directories
cleanup_directories() {
    print_info "Cleaning up directories..."
    
    # Remove empty GOBIN directory
    if [[ -d "$GOBIN" ]]; then
        if [[ -z "$(ls -A "$GOBIN" 2>/dev/null)" ]]; then
            rmdir "$GOBIN" 2>/dev/null || rm -rf "$GOBIN"
            REMOVED_ITEMS+=("Empty directory: $GOBIN")
        fi
    fi
    
    # Remove empty SDK directory
    if [[ -d "$SDK_DIR" ]]; then
        if [[ -z "$(ls -A "$SDK_DIR" 2>/dev/null)" ]]; then
            rmdir "$SDK_DIR" 2>/dev/null || rm -rf "$SDK_DIR"
            REMOVED_ITEMS+=("Empty directory: $SDK_DIR")
        fi
    fi
    
    # Remove empty go directory if it exists
    local go_dir="${GOPATH:-$HOME/go}"
    if [[ -d "$go_dir" ]]; then
        # First try to remove the bin subdirectory if it's empty and is our GOBIN
        if [[ -d "$go_dir/bin" && "$GOBIN" == "$go_dir/bin" ]]; then
            if [[ -z "$(ls -A "$go_dir/bin" 2>/dev/null)" ]]; then
                rmdir "$go_dir/bin" 2>/dev/null || rm -rf "$go_dir/bin" 2>/dev/null || true
            fi
        fi
        # Then try to remove the go directory if it's empty
        if [[ -z "$(ls -A "$go_dir" 2>/dev/null)" ]]; then
            rmdir "$go_dir" 2>/dev/null || rm -rf "$go_dir"
            REMOVED_ITEMS+=("Empty directory: $go_dir")
        fi
    fi
}

# Parse command line arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --remove-all)
                REMOVAL_MODE="remove-all"
                shift
                ;;
            --keep-default)
                REMOVAL_MODE="keep-default"
                shift
                ;;
            --keep-all)
                REMOVAL_MODE="keep-all"
                shift
                ;;
            -h|--help)
                show_help
                ;;
            *)
                print_error "Unknown option: $1"
                echo "Use -h or --help for usage information"
                exit 1
                ;;
        esac
    done
}

# Ask user what to do with Go versions
ask_removal_mode() {
    echo "What would you like to do with gman-installed Go versions?"
    echo ""
    echo "  1) Remove all Go versions (recommended for complete cleanup)"
    echo "  2) Keep only the default Go version"
    echo "  3) Keep all Go versions (only remove gman itself)"
    echo ""
    
    while true; do
        read -p "Please choose an option [1-3]: " -n 1 -r
        echo
        case $REPLY in
            1)
                REMOVAL_MODE="remove-all"
                break
                ;;
            2)
                REMOVAL_MODE="keep-default"
                break
                ;;
            3)
                REMOVAL_MODE="keep-all"
                break
                ;;
            *)
                print_error "Invalid option. Please choose 1, 2, or 3."
                ;;
        esac
    done
}

# Main uninstallation
main() {
    echo -e "${BLUE}goverman uninstaller${NC}"
    echo "====================="
    echo
    
    # Parse command line arguments
    parse_args "$@"
    
    # If no mode specified and not in CI, ask the user
    if [[ -z "$REMOVAL_MODE" && "${CI:-false}" != "true" ]]; then
        ask_removal_mode
    elif [[ -z "$REMOVAL_MODE" ]]; then
        # Default to remove-all in CI or when not specified
        REMOVAL_MODE="remove-all"
    fi
    
    # Show what will be done
    case "$REMOVAL_MODE" in
        remove-all)
            print_warning "Will remove gman and all gman-installed Go versions"
            ;;
        keep-default)
            print_warning "Will remove gman and non-default Go versions"
            ;;
        keep-all)
            print_warning "Will remove only gman (keeping all Go versions)"
            ;;
    esac
    echo
    
    # Check permissions
    check_permissions
    
    # Remove components
    remove_gman_binary
    remove_man_page
    handle_go_versions "$REMOVAL_MODE"
    
    # Only remove PATH entries if we're removing gman completely
    if [[ "$REMOVAL_MODE" != "keep-all" ]]; then
        remove_path_entries
    else
        print_info "Keeping PATH entries since Go versions are retained"
    fi
    
    cleanup_directories
    
    # Summary
    echo
    echo -e "${GREEN}✓ Uninstallation completed!${NC}"
    echo
    
    if [[ ${#REMOVED_ITEMS[@]} -gt 0 ]]; then
        echo "The following items were removed:"
        for item in "${REMOVED_ITEMS[@]}"; do
            echo "  - $item"
        done
        echo
    fi
    
    echo "Notes:"
    if [[ "$REMOVAL_MODE" != "keep-all" ]]; then
        echo "  - Shell profile backups were created with .goverman-backup extension"
        echo "  - Restart your shell or open a new terminal for PATH changes to take effect"
    fi
    
    if [[ "$REMOVAL_MODE" == "keep-all" || "$REMOVAL_MODE" == "keep-default" ]]; then
        echo "  - Remaining Go versions can still be used directly (e.g., go1.23.9)"
        if [[ "$REMOVAL_MODE" == "keep-default" ]]; then
            echo "  - You may need to recreate the default 'go' symlink manually"
        fi
    fi
    
    echo "  - System Go installations (if any) were not affected"
    echo
    
    # Check if there's a system Go
    if command -v go >/dev/null 2>&1; then
        local go_version=$(go version 2>/dev/null || echo "unknown")
        print_info "System Go detected: $go_version"
    fi
}

# Run main function
main "$@"