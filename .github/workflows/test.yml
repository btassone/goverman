name: Test Go Scripts

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test on ${{ matrix.name || matrix.os }}
    strategy:
      fail-fast: false  # Continue running tests even if one fails
      matrix:
        include:
          - os: ubuntu-latest
          - os: ubuntu-22.04
          - os: macos-latest
          - os: macos-13
          - os: windows-latest
          - os: ubuntu-latest
            name: alpine-latest
            container: alpine:latest
          - os: ubuntu-latest
            name: almalinux-9
            container: almalinux:9
          - os: ubuntu-latest
            name: almalinux-8
            container: almalinux:8
          - os: ubuntu-latest
            name: opensuse-leap
            container: opensuse/leap:latest
          - os: ubuntu-latest
            name: opensuse-tumbleweed
            container: opensuse/tumbleweed:latest
          - os: ubuntu-latest
            name: archlinux
            container: archlinux:latest
          - os: ubuntu-latest
            name: gentoo
            container: gentoo/stage3:latest
          - os: ubuntu-latest
            name: void
            container: ghcr.io/void-linux/void-linux:latest-full-x86_64
          - os: ubuntu-latest
            name: slackware
            container: vbatts/slackware:15.0
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    
    steps:
    - name: Install essential tools for checkout (openSUSE)
      if: startsWith(matrix.container || '', 'opensuse')
      run: |
        # tar and gzip should be pre-installed, just verify
        command -v tar >/dev/null 2>&1 || zypper --non-interactive install tar
        command -v gzip >/dev/null 2>&1 || zypper --non-interactive install gzip
    
    - name: Install essential tools for checkout (Arch Linux)
      if: matrix.container == 'archlinux:latest'
      run: |
        pacman -Sy --noconfirm tar gzip
    
    - name: Install essential tools for checkout (Gentoo)
      if: matrix.container == 'gentoo/stage3:latest'
      run: |
        # Gentoo stage3 should have tar and gzip already
        # Just verify they exist
        which tar gzip || emerge -q app-arch/tar app-arch/gzip
    
    - name: Install essential tools for checkout (Void Linux)
      if: matrix.container == 'ghcr.io/void-linux/void-linux:latest-full-x86_64'
      run: |
        # Try to install gcc-libs which includes libstdc++
        # Skip repo sync due to SSL issues
        xbps-install -y gcc-libs 2>/dev/null || true
        xbps-install -y libgcc 2>/dev/null || true
        xbps-install -y gcc 2>/dev/null || true
        
        # The base image should have tar and gzip
        which tar || xbps-install -y tar 2>/dev/null || true
        which gzip || xbps-install -y gzip 2>/dev/null || true
    
    - name: Install essential tools for checkout (Slackware)
      if: matrix.container == 'vbatts/slackware:15.0'
      run: |
        # Slackware should have tar and gzip already
        which tar gzip || echo "Basic tools check"
    
    - name: Configure Git (Windows only)
      if: runner.os == 'Windows'
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
      shell: cmd
    
    - uses: actions/checkout@v4
    
    - name: Install Alpine dependencies
      if: matrix.container == 'alpine:latest'
      run: |
        apk add --no-cache bash go git curl wget
        mkdir -p $HOME/go/bin
        echo "export PATH=$HOME/go/bin:$PATH" >> $HOME/.profile
    
    - name: Install AlmaLinux dependencies
      if: startsWith(matrix.container || '', 'almalinux')
      run: |
        dnf install -y epel-release
        # Use --allowerasing to replace curl-minimal with full curl
        dnf install -y --allowerasing bash git curl wget tar gzip which
        # Install Go from EPEL or download it
        dnf install -y golang || {
          # If Go is not in repos, download and install it
          curl -L https://go.dev/dl/go1.21.13.linux-amd64.tar.gz -o /tmp/go.tar.gz
          tar -C /usr/local -xzf /tmp/go.tar.gz
          echo 'export PATH=/usr/local/go/bin:$PATH' >> /etc/profile
          export PATH=/usr/local/go/bin:$PATH
        }
        mkdir -p $HOME/go/bin
        echo "export PATH=$HOME/go/bin:$PATH" >> $HOME/.bash_profile
    
    - name: Install openSUSE dependencies
      if: startsWith(matrix.container || '', 'opensuse')
      run: |
        # Install required packages (which is in util-linux on openSUSE)
        zypper --non-interactive install bash curl util-linux findutils || true
        # Install Go
        zypper --non-interactive install go || {
          # If Go is not in repos, download and install it
          curl -L https://go.dev/dl/go1.21.13.linux-amd64.tar.gz -o /tmp/go.tar.gz
          tar -C /usr/local -xzf /tmp/go.tar.gz
          # Clean up PATH (remove empty entries) and set it properly
          export PATH="/usr/local/go/bin:${PATH//::/:}"
          export PATH="${PATH#:}"
          export PATH="${PATH%:}"
          echo 'export PATH="/usr/local/go/bin:$PATH"' >> /etc/profile
        }
        mkdir -p $HOME/go/bin
        echo 'export PATH="$HOME/go/bin:$PATH"' >> $HOME/.bash_profile
    
    - name: Install Arch Linux dependencies
      if: matrix.container == 'archlinux:latest'
      run: |
        # Update package database and upgrade system
        pacman -Syu --noconfirm
        # Install required packages
        pacman -S --noconfirm bash git curl wget which findutils go
        mkdir -p $HOME/go/bin
        echo "export PATH=$HOME/go/bin:$PATH" >> $HOME/.bash_profile
    
    - name: Install Gentoo dependencies
      if: matrix.container == 'gentoo/stage3:latest'
      run: |
        # Gentoo stage3 has basic tools, but we need a way to download
        # Use Python's urllib (which is included in stage3) to download Go
        cat > /tmp/download.py << 'EOF'
        import urllib.request
        import sys
        url = sys.argv[1]
        output = sys.argv[2]
        print(f"Downloading {url} to {output}")
        urllib.request.urlretrieve(url, output)
        print("Download complete")
        EOF
        
        # Download Go using Python
        python3 /tmp/download.py https://go.dev/dl/go1.21.13.linux-amd64.tar.gz /tmp/go.tar.gz
        
        # Install Go
        tar -C /usr/local -xzf /tmp/go.tar.gz
        rm /tmp/go.tar.gz /tmp/download.py
        
        # Set up PATH
        export PATH="/usr/local/go/bin:${PATH//::/:}"
        export PATH="${PATH#:}"
        export PATH="${PATH%:}"
        echo "export PATH=\"/usr/local/go/bin:\$PATH\"" >> /etc/profile
        mkdir -p $HOME/go/bin
        echo "export PATH=\"\$HOME/go/bin:\$PATH\"" >> $HOME/.bash_profile
        
        # Create a minimal curl wrapper using Python for gman to use
        cat > /usr/local/bin/curl << 'EOF'
        #!/usr/bin/env python3
        import urllib.request
        import sys
        import os
        
        # Minimal curl emulation for gman's needs
        args = sys.argv[1:]
        output_file = None
        url = None
        silent = False
        show_progress = False
        
        i = 0
        while i < len(args):
            arg = args[i]
            if arg == '-o' and i + 1 < len(args):
                output_file = args[i + 1]
                i += 2
            elif arg == '-O':
                # Output to basename of URL
                i += 1
            elif arg in ['-s', '-sL']:
                silent = True
                i += 1
            elif arg == '-L':
                # Follow redirects (urllib does this by default)
                i += 1
            elif arg == '--progress-bar':
                show_progress = True
                i += 1
            elif arg == '--max-time':
                # Skip timeout for simplicity
                i += 2
            elif not arg.startswith('-'):
                url = arg
                i += 1
            else:
                i += 1
        
        if url:
            if not output_file and '-O' in args:
                output_file = os.path.basename(url)
            
            try:
                if output_file:
                    if not silent:
                        print(f"Downloading {url} to {output_file}", file=sys.stderr)
                    urllib.request.urlretrieve(url, output_file)
                else:
                    # Output to stdout
                    with urllib.request.urlopen(url) as response:
                        print(response.read().decode('utf-8'))
            except Exception as e:
                print(f"curl: {e}", file=sys.stderr)
                sys.exit(1)
        EOF
        chmod +x /usr/local/bin/curl
        
        # Verify basic tools are available
        which bash || echo "Warning: bash not found"
        which find || echo "Warning: find not found"
        which curl || echo "Warning: curl wrapper not found"
    
    - name: Install Void Linux dependencies
      if: matrix.container == 'ghcr.io/void-linux/void-linux:latest-full-x86_64'
      run: |
        # Install packages without updating repos (SSL issues)
        # Most tools should already be present
        which bash || xbps-install -y bash
        which findutils || xbps-install -y findutils
        
        # Create a simple downloader using available tools
        if command -v wget >/dev/null 2>&1; then
          wget --no-check-certificate https://go.dev/dl/go1.21.13.linux-amd64.tar.gz -O /tmp/go.tar.gz
        elif command -v curl >/dev/null 2>&1; then
          curl -kL https://go.dev/dl/go1.21.13.linux-amd64.tar.gz -o /tmp/go.tar.gz
        else
          # Use Python if available
          python3 -c "import urllib.request; urllib.request.urlretrieve('https://go.dev/dl/go1.21.13.linux-amd64.tar.gz', '/tmp/go.tar.gz')"
        fi
        
        tar -C /usr/local -xzf /tmp/go.tar.gz
        export PATH="/usr/local/go/bin:$PATH"
        echo "export PATH=\"/usr/local/go/bin:\$PATH\"" >> /etc/profile
        mkdir -p $HOME/go/bin
        echo "export PATH=\"\$HOME/go/bin:\$PATH\"" >> $HOME/.bash_profile
    
    - name: Install Slackware dependencies
      if: matrix.container == 'vbatts/slackware:15.0'
      run: |
        # Slackware typically has most tools pre-installed
        # Verify basic tools
        which bash || echo "bash not found"
        which curl || echo "curl not found" 
        which wget || echo "wget not found"
        which find || echo "find not found"
        
        # Install Go directly using wget with proper options
        if command -v wget >/dev/null 2>&1; then
          # Use --no-check-certificate due to potential SSL issues
          wget --no-check-certificate https://go.dev/dl/go1.21.13.linux-amd64.tar.gz -O /tmp/go.tar.gz || {
            echo "wget failed, trying with different options"
            wget --secure-protocol=TLSv1_2 https://go.dev/dl/go1.21.13.linux-amd64.tar.gz -O /tmp/go.tar.gz
          }
        else
          # Try Python as fallback
          echo "Using Python to download Go"
          python -c "import urllib; urllib.urlretrieve('https://go.dev/dl/go1.21.13.linux-amd64.tar.gz', '/tmp/go.tar.gz')" || \
          python3 -c "import urllib.request; urllib.request.urlretrieve('https://go.dev/dl/go1.21.13.linux-amd64.tar.gz', '/tmp/go.tar.gz')"
        fi
        
        # Verify download
        if [[ ! -f /tmp/go.tar.gz ]]; then
          echo "Failed to download Go tarball"
          exit 1
        fi
        
        tar -C /usr/local -xzf /tmp/go.tar.gz
        export PATH="/usr/local/go/bin:$PATH"
        echo "export PATH=\"/usr/local/go/bin:\$PATH\"" >> /etc/profile
        mkdir -p $HOME/go/bin
        echo "export PATH=\"\$HOME/go/bin:\$PATH\"" >> $HOME/.bashrc
    
    - name: Cache Go installation (Windows)
      if: runner.os == 'Windows'
      uses: actions/cache@v3
      with:
        path: |
          ~/go
          ~/AppData/Local/go-build
        key: ${{ runner.os }}-go-1.21-installation
    
    - name: Set up Go
      if: matrix.container == null
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: false  # Disable cache since this isn't a Go module (no go.sum)
    
    - name: Make scripts executable
      run: chmod +x gman test-go-scripts.sh test-path-setup.sh test-list-available.sh test-alpine-detection.sh test-distro-detection.sh test-bootstrap.sh test-uninstall-all.sh
      if: runner.os != 'Windows'
    
    - name: Run PATH setup tests (Unix)
      run: ./test-path-setup.sh
      if: runner.os != 'Windows'
    
    - name: Run installation tests (Unix)
      run: ./test-go-scripts.sh
      if: runner.os != 'Windows'
    
    - name: Run list-available tests (Unix)
      run: ./test-list-available.sh
      if: runner.os != 'Windows'
    
    - name: Run distribution detection tests (Unix)
      run: ./test-distro-detection.sh
      if: runner.os != 'Windows'
    
    - name: Run Alpine detection tests (Unix)
      run: ./test-alpine-detection.sh
      if: runner.os != 'Windows'
    
    - name: Run bootstrap tests (Unix)
      run: ./test-bootstrap.sh
      if: runner.os != 'Windows'
    
    - name: Run uninstall-all tests (Unix)
      run: ./test-uninstall-all.sh
      if: runner.os != 'Windows'
    
    - name: Run quick tests (Windows)
      run: |
        echo "Running quick tests in parallel..."
        ./test-path-setup.sh &
        pid1=$!
        ./test-distro-detection.sh &
        pid2=$!
        ./test-alpine-detection.sh &
        pid3=$!
        ./test-bootstrap.sh &
        pid4=$!
        ./test-uninstall-all.sh &
        pid5=$!
        
        # Wait for all background jobs and check their exit status
        wait $pid1 || exit 1
        wait $pid2 || exit 1
        wait $pid3 || exit 1
        wait $pid4 || exit 1
        wait $pid5 || exit 1
        
        echo "All quick tests completed successfully"
      shell: bash
      if: runner.os == 'Windows'
    
    - name: Run installation tests (Windows)
      run: ./test-go-scripts.sh
      shell: bash
      if: runner.os == 'Windows'
    
    - name: Run list-available tests (Windows)
      run: ./test-list-available.sh
      shell: bash
      if: runner.os == 'Windows'